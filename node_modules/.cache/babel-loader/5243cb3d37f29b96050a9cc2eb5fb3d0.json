{"ast":null,"code":"var eventListenerOptions;\nvar eventMap = new WeakMap();\n\nfunction getOptions() {\n  if (eventListenerOptions !== undefined) {\n    return eventListenerOptions;\n  }\n\n  var supportPassiveEvent = false;\n\n  try {\n    var noop = function () {};\n\n    var options = Object.defineProperty({}, 'passive', {\n      get: function () {\n        supportPassiveEvent = true;\n      }\n    });\n    window.addEventListener('testPassive', noop, options);\n    window.removeEventListener('testPassive', noop, options);\n  } catch (e) {}\n\n  eventListenerOptions = supportPassiveEvent ? {\n    passive: false\n  } : false;\n  return eventListenerOptions;\n}\n\nexport function eventScope(scrollbar) {\n  var configs = eventMap.get(scrollbar) || [];\n  eventMap.set(scrollbar, configs);\n  return function addEvent(elem, events, fn) {\n    function handler(event) {\n      // ignore default prevented events\n      if (event.defaultPrevented) {\n        return;\n      }\n\n      fn(event);\n    }\n\n    events.split(/\\s+/g).forEach(function (eventName) {\n      configs.push({\n        elem: elem,\n        eventName: eventName,\n        handler: handler\n      });\n      elem.addEventListener(eventName, handler, getOptions());\n    });\n  };\n}\nexport function clearEventsOn(scrollbar) {\n  var configs = eventMap.get(scrollbar);\n\n  if (!configs) {\n    return;\n  }\n\n  configs.forEach(function (_a) {\n    var elem = _a.elem,\n        eventName = _a.eventName,\n        handler = _a.handler;\n    elem.removeEventListener(eventName, handler, getOptions());\n  });\n  eventMap.delete(scrollbar);\n}","map":{"version":3,"mappings":"AAYA,IAAIA,oBAAJ;AAEA,IAAMC,QAAQ,GAAG,IAAIC,OAAJ,EAAjB;;AAEA,SAASC,UAAT,GAAmB;AACjB,MAAIH,oBAAoB,KAAKI,SAA7B,EAAwC;AACtC,WAAOJ,oBAAP;AACD;;AAED,MAAIK,mBAAmB,GAAG,KAA1B;;AAEA,MAAI;AACF,QAAMC,IAAI,GAAG,aAAQ,CAArB;;AACA,QAAMC,OAAO,GAAGC,MAAM,CAACC,cAAP,CAAsB,EAAtB,EAA0B,SAA1B,EAAqC;AACnDC,SAAG;AACDL,2BAAmB,GAAG,IAAtB;AACD;AAHkD,KAArC,CAAhB;AAKAM,UAAM,CAACC,gBAAP,CAAwB,aAAxB,EAAuCN,IAAvC,EAA6CC,OAA7C;AACAI,UAAM,CAACE,mBAAP,CAA2B,aAA3B,EAA0CP,IAA1C,EAAgDC,OAAhD;AACD,GATD,CASE,OAAOO,CAAP,EAAU,CAAE;;AAEdd,sBAAoB,GAAGK,mBAAmB,GAAG;AAAEU,WAAO,EAAE;AAAX,GAAH,GAAgD,KAA1F;AAEA,SAAOf,oBAAP;AACD;;AAED,OAAM,SAAUgB,UAAV,CAAqBC,SAArB,EAAyC;AAC7C,MAAMC,OAAO,GAAGjB,QAAQ,CAACS,GAAT,CAAaO,SAAb,KAA2B,EAA3C;AAEAhB,UAAQ,CAACkB,GAAT,CAAaF,SAAb,EAAwBC,OAAxB;AAEA,SAAO,SAASE,QAAT,CACLC,IADK,EAELC,MAFK,EAGLC,EAHK,EAGW;AAEhB,aAASC,OAAT,CAAiBC,KAAjB,EAA2B;AACzB;AACA,UAAIA,KAAK,CAACC,gBAAV,EAA4B;AAC1B;AACD;;AAEDH,QAAE,CAACE,KAAD,CAAF;AACD;;AAEDH,UAAM,CAACK,KAAP,CAAa,MAAb,EAAqBC,OAArB,CAA6B,UAACC,SAAD,EAAU;AACrCX,aAAO,CAACY,IAAR,CAAa;AAAET,YAAI,MAAN;AAAQQ,iBAAS,WAAjB;AAAmBL,eAAO;AAA1B,OAAb;AAEAH,UAAI,CAACT,gBAAL,CAAsBiB,SAAtB,EAAiCL,OAAjC,EAA0CrB,UAAU,EAApD;AACD,KAJD;AAKD,GAnBD;AAoBD;AAED,OAAM,SAAU4B,aAAV,CAAwBd,SAAxB,EAA4C;AAChD,MAAMC,OAAO,GAAGjB,QAAQ,CAACS,GAAT,CAAaO,SAAb,CAAhB;;AAEA,MAAI,CAACC,OAAL,EAAc;AACZ;AACD;;AAEDA,SAAO,CAACU,OAAR,CAAgB,UAACI,EAAD,EAA6B;QAA1BX;QAAMQ;QAAWL;AAClCH,QAAI,CAACR,mBAAL,CAAyBgB,SAAzB,EAAoCL,OAApC,EAA6CrB,UAAU,EAAvD;AACD,GAFD;AAIAF,UAAQ,CAACgC,MAAT,CAAgBhB,SAAhB;AACD","names":["eventListenerOptions","eventMap","WeakMap","getOptions","undefined","supportPassiveEvent","noop","options","Object","defineProperty","get","window","addEventListener","removeEventListener","e","passive","eventScope","scrollbar","configs","set","addEvent","elem","events","fn","handler","event","defaultPrevented","split","forEach","eventName","push","clearEventsOn","_a","delete"],"sources":["/home/mohammad/Desktop/MARS-main/node_modules/smooth-scrollbar/src/utils/event-hub.ts"],"sourcesContent":["import { Scrollbar } from '../interfaces/';\n\nexport interface EventHandler {\n  (event: any): void;\n}\n\ntype EventConfig = {\n  elem: EventTarget,\n  eventName: string,\n  handler: EventHandler,\n};\n\nlet eventListenerOptions: boolean | EventListenerOptions;\n\nconst eventMap = new WeakMap<Scrollbar, EventConfig[]>();\n\nfunction getOptions(): typeof eventListenerOptions {\n  if (eventListenerOptions !== undefined) {\n    return eventListenerOptions;\n  }\n\n  let supportPassiveEvent = false;\n\n  try {\n    const noop = () => {};\n    const options = Object.defineProperty({}, 'passive', {\n      get() {\n        supportPassiveEvent = true;\n      },\n    });\n    window.addEventListener('testPassive', noop, options);\n    window.removeEventListener('testPassive', noop, options);\n  } catch (e) {}\n\n  eventListenerOptions = supportPassiveEvent ? { passive: false } as EventListenerOptions : false;\n\n  return eventListenerOptions;\n}\n\nexport function eventScope(scrollbar: Scrollbar) {\n  const configs = eventMap.get(scrollbar) || [];\n\n  eventMap.set(scrollbar, configs);\n\n  return function addEvent(\n    elem: EventTarget,\n    events: string,\n    fn: EventHandler,\n   ) {\n    function handler(event: any) {\n      // ignore default prevented events\n      if (event.defaultPrevented) {\n        return;\n      }\n\n      fn(event);\n    }\n\n    events.split(/\\s+/g).forEach((eventName) => {\n      configs.push({ elem, eventName, handler });\n\n      elem.addEventListener(eventName, handler, getOptions());\n    });\n  };\n}\n\nexport function clearEventsOn(scrollbar: Scrollbar) {\n  const configs = eventMap.get(scrollbar);\n\n  if (!configs) {\n    return;\n  }\n\n  configs.forEach(({ elem, eventName, handler }) => {\n    elem.removeEventListener(eventName, handler, getOptions());\n  });\n\n  eventMap.delete(scrollbar);\n}\n"]},"metadata":{},"sourceType":"module"}