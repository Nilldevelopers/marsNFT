{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { range, boolean } from './decorators/';\n\nvar Options =\n/** @class */\nfunction () {\n  function Options(config) {\n    var _this = this;\n\n    if (config === void 0) {\n      config = {};\n    }\n    /**\n     * Momentum reduction damping factor, a float value between `(0, 1)`.\n     * The lower the value is, the more smooth the scrolling will be\n     * (also the more paint frames).\n     */\n\n\n    this.damping = 0.1;\n    /**\n     * Minimal size for scrollbar thumbs.\n     */\n\n    this.thumbMinSize = 20;\n    /**\n     * Render every frame in integer pixel values\n     * set to `true` to improve scrolling performance.\n     */\n\n    this.renderByPixels = true;\n    /**\n     * Keep scrollbar tracks visible\n     */\n\n    this.alwaysShowTracks = false;\n    /**\n     * Set to `true` to allow outer scrollbars continue scrolling\n     * when current scrollbar reaches edge.\n     */\n\n    this.continuousScrolling = true;\n    /**\n     * Delegate wheel events and touch events to the given element.\n     * By default, the container element is used.\n     * This option will be useful for dealing with fixed elements.\n     */\n\n    this.delegateTo = null;\n    /**\n     * Options for plugins. Syntax:\n     *   plugins[pluginName] = pluginOptions: any\n     */\n\n    this.plugins = {};\n    Object.keys(config).forEach(function (prop) {\n      _this[prop] = config[prop];\n    });\n  }\n\n  Object.defineProperty(Options.prototype, \"wheelEventTarget\", {\n    get: function get() {\n      return this.delegateTo;\n    },\n    set: function set(el) {\n      console.warn('[smooth-scrollbar]: `options.wheelEventTarget` is deprecated and will be removed in the future, use `options.delegateTo` instead.');\n      this.delegateTo = el;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  __decorate([range(0, 1)], Options.prototype, \"damping\", void 0);\n\n  __decorate([range(0, Infinity)], Options.prototype, \"thumbMinSize\", void 0);\n\n  __decorate([boolean], Options.prototype, \"renderByPixels\", void 0);\n\n  __decorate([boolean], Options.prototype, \"alwaysShowTracks\", void 0);\n\n  __decorate([boolean], Options.prototype, \"continuousScrolling\", void 0);\n\n  return Options;\n}();\n\nexport { Options };","map":{"version":3,"mappings":";AAAA,SACEA,KADF,EAEEC,OAFF,QAGO,eAHP;;AASA;AAAA;AAAA;AA0DE,mBAAYC,MAAZ,EAAkD;AAAlD;;AAAY;AAAAA;AAAsC;AAzDlD;;;;;;;AAMA,mBAAU,GAAV;AAEA;;;;AAIA,wBAAe,EAAf;AAEA;;;;;AAKA,0BAAiB,IAAjB;AAEA;;;;AAIA,4BAAmB,KAAnB;AAEA;;;;;AAKA,+BAAsB,IAAtB;AAEA;;;;;;AAKA,sBAAiC,IAAjC;AAYA;;;;;AAIS,mBAAe,EAAf;AAGPC,UAAM,CAACC,IAAP,CAAYF,MAAZ,EAAoBG,OAApB,CAA4B,UAACC,IAAD,EAAK;AAC/BC,WAAI,CAACD,IAAD,CAAJ,GAAaJ,MAAM,CAACI,IAAD,CAAnB;AACD,KAFD;AAGD;;AApBDH,wBAAIK,iBAAJ,EAAI,kBAAJ,EAAoB;SAApB;AACE,aAAO,KAAKC,UAAZ;AACD,KAFmB;SAIpB,aAAqBC,EAArB,EAA2C;AACzCC,aAAO,CAACC,IAAR,CAAa,mIAAb;AAEA,WAAKH,UAAL,GAAkBC,EAAlB;AACD,KARmB;oBAAA;;AAAA,GAApB;;AAnCAG,cADCb,KAAK,CAAC,CAAD,EAAI,CAAJ,CACN;;AAMAa,cADCb,KAAK,CAAC,CAAD,EAAIc,QAAJ,CACN;;AAOAD,cADCZ,OACD;;AAMAY,cADCZ,OACD;;AAOAY,cADCZ,OACD;;AA8BF;AA/DA;;SAAaO","names":["range","boolean","config","Object","keys","forEach","prop","_this","Options","delegateTo","el","console","warn","__decorate","Infinity"],"sources":["/home/mohammad/Desktop/MARS-main/node_modules/smooth-scrollbar/src/options.ts"],"sourcesContent":["import {\n  range,\n  boolean,\n} from './decorators/';\n\nimport {\n  ScrollbarOptions,\n} from './interfaces/';\n\nexport class Options {\n  /**\n   * Momentum reduction damping factor, a float value between `(0, 1)`.\n   * The lower the value is, the more smooth the scrolling will be\n   * (also the more paint frames).\n   */\n  @range(0, 1)\n  damping = 0.1;\n\n  /**\n   * Minimal size for scrollbar thumbs.\n   */\n  @range(0, Infinity)\n  thumbMinSize = 20;\n\n  /**\n   * Render every frame in integer pixel values\n   * set to `true` to improve scrolling performance.\n   */\n  @boolean\n  renderByPixels = true;\n\n  /**\n   * Keep scrollbar tracks visible\n   */\n  @boolean\n  alwaysShowTracks = false;\n\n  /**\n   * Set to `true` to allow outer scrollbars continue scrolling\n   * when current scrollbar reaches edge.\n   */\n  @boolean\n  continuousScrolling = true;\n\n  /**\n   * Delegate wheel events and touch events to the given element.\n   * By default, the container element is used.\n   * This option will be useful for dealing with fixed elements.\n   */\n  delegateTo: EventTarget | null = null;\n\n  get wheelEventTarget() {\n    return this.delegateTo;\n  }\n\n  set wheelEventTarget(el: EventTarget | null) {\n    console.warn('[smooth-scrollbar]: `options.wheelEventTarget` is deprecated and will be removed in the future, use `options.delegateTo` instead.');\n\n    this.delegateTo = el;\n  }\n\n  /**\n   * Options for plugins. Syntax:\n   *   plugins[pluginName] = pluginOptions: any\n   */\n  readonly plugins: any = {};\n\n  constructor(config: Partial<ScrollbarOptions> = {}) {\n    Object.keys(config).forEach((prop) => {\n      this[prop] = config[prop];\n    });\n  }\n}\n"]},"metadata":{},"sourceType":"module"}