{"ast":null,"code":"import { ScrollbarThumb } from './thumb';\nimport { setStyle } from '../utils/';\n\nvar ScrollbarTrack =\n/** @class */\nfunction () {\n  function ScrollbarTrack(direction, thumbMinSize) {\n    if (thumbMinSize === void 0) {\n      thumbMinSize = 0;\n    }\n    /**\n     * Track element\n     */\n\n\n    this.element = document.createElement('div');\n    this._isShown = false;\n    this.element.className = \"scrollbar-track scrollbar-track-\" + direction;\n    this.thumb = new ScrollbarThumb(direction, thumbMinSize);\n    this.thumb.attachTo(this.element);\n  }\n  /**\n   * Attach to scrollbar container element\n   *\n   * @param scrollbarContainer Scrollbar container element\n   */\n\n\n  ScrollbarTrack.prototype.attachTo = function (scrollbarContainer) {\n    scrollbarContainer.appendChild(this.element);\n  };\n  /**\n   * Show track immediately\n   */\n\n\n  ScrollbarTrack.prototype.show = function () {\n    if (this._isShown) {\n      return;\n    }\n\n    this._isShown = true;\n    this.element.classList.add('show');\n  };\n  /**\n   * Hide track immediately\n   */\n\n\n  ScrollbarTrack.prototype.hide = function () {\n    if (!this._isShown) {\n      return;\n    }\n\n    this._isShown = false;\n    this.element.classList.remove('show');\n  };\n\n  ScrollbarTrack.prototype.update = function (scrollOffset, containerSize, pageSize) {\n    setStyle(this.element, {\n      display: pageSize <= containerSize ? 'none' : 'block'\n    });\n    this.thumb.update(scrollOffset, containerSize, pageSize);\n  };\n\n  return ScrollbarTrack;\n}();\n\nexport { ScrollbarTrack };","map":{"version":3,"mappings":"AAEA,SAASA,cAAT,QAA+B,SAA/B;AAEA,SACEC,QADF,QAEO,WAFP;;AAIA;AAAA;AAAA;AAUE,0BACEC,SADF,EAEEC,YAFF,EAE0B;AAAxB;AAAAA;AAAwB;AAT1B;;;;;AAGS,mBAAUC,QAAQ,CAACC,aAAT,CAAuB,KAAvB,CAAV;AAED,oBAAW,KAAX;AAMN,SAAKC,OAAL,CAAaC,SAAb,GAAyB,qCAAmCL,SAA5D;AAEA,SAAKM,KAAL,GAAa,IAAIR,cAAJ,CACXE,SADW,EAEXC,YAFW,CAAb;AAKA,SAAKK,KAAL,CAAWC,QAAX,CAAoB,KAAKH,OAAzB;AACD;AAED;;;;;;;AAKAI,gDAASC,kBAAT,EAAwC;AACtCA,sBAAkB,CAACC,WAAnB,CAA+B,KAAKN,OAApC;AACD,GAFD;AAIA;;;;;AAGAI;AACE,QAAI,KAAKG,QAAT,EAAmB;AACjB;AACD;;AAED,SAAKA,QAAL,GAAgB,IAAhB;AACA,SAAKP,OAAL,CAAaQ,SAAb,CAAuBC,GAAvB,CAA2B,MAA3B;AACD,GAPD;AASA;;;;;AAGAL;AACE,QAAI,CAAC,KAAKG,QAAV,EAAoB;AAClB;AACD;;AAED,SAAKA,QAAL,GAAgB,KAAhB;AACA,SAAKP,OAAL,CAAaQ,SAAb,CAAuBE,MAAvB,CAA8B,MAA9B;AACD,GAPD;;AASAN,8CACEO,YADF,EAEEC,aAFF,EAGEC,QAHF,EAGkB;AAEhBlB,YAAQ,CAAC,KAAKK,OAAN,EAAe;AACrBc,aAAO,EAAED,QAAQ,IAAID,aAAZ,GAA4B,MAA5B,GAAqC;AADzB,KAAf,CAAR;AAIA,SAAKV,KAAL,CAAWa,MAAX,CAAkBJ,YAAlB,EAAgCC,aAAhC,EAA+CC,QAA/C;AACD,GAVD;;AAWF;AAAC,CApED","names":["ScrollbarThumb","setStyle","direction","thumbMinSize","document","createElement","element","className","thumb","attachTo","ScrollbarTrack","scrollbarContainer","appendChild","_isShown","classList","add","remove","scrollOffset","containerSize","pageSize","display","update"],"sources":["/home/mohammad/Desktop/MARS-main/node_modules/smooth-scrollbar/src/track/track.ts"],"sourcesContent":["import * as I from '../interfaces/';\nimport { TrackDirection } from './direction';\nimport { ScrollbarThumb } from './thumb';\n\nimport {\n  setStyle,\n} from '../utils/';\n\nexport class ScrollbarTrack implements I.ScrollbarTrack {\n  readonly thumb: ScrollbarThumb;\n\n  /**\n   * Track element\n   */\n  readonly element = document.createElement('div');\n\n  private _isShown = false;\n\n  constructor(\n    direction: TrackDirection,\n    thumbMinSize: number = 0,\n  ) {\n    this.element.className = `scrollbar-track scrollbar-track-${direction}`;\n\n    this.thumb = new ScrollbarThumb(\n      direction,\n      thumbMinSize,\n    );\n\n    this.thumb.attachTo(this.element);\n  }\n\n  /**\n   * Attach to scrollbar container element\n   *\n   * @param scrollbarContainer Scrollbar container element\n   */\n  attachTo(scrollbarContainer: HTMLElement) {\n    scrollbarContainer.appendChild(this.element);\n  }\n\n  /**\n   * Show track immediately\n   */\n  show() {\n    if (this._isShown) {\n      return;\n    }\n\n    this._isShown = true;\n    this.element.classList.add('show');\n  }\n\n  /**\n   * Hide track immediately\n   */\n  hide() {\n    if (!this._isShown) {\n      return;\n    }\n\n    this._isShown = false;\n    this.element.classList.remove('show');\n  }\n\n  update(\n    scrollOffset: number,\n    containerSize: number,\n    pageSize: number,\n  ) {\n    setStyle(this.element, {\n      display: pageSize <= containerSize ? 'none' : 'block',\n    });\n\n    this.thumb.update(scrollOffset, containerSize, pageSize);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}