{"ast":null,"code":"import { TrackDirection } from './direction';\nimport { setStyle } from '../utils/';\n\nvar ScrollbarThumb =\n/** @class */\nfunction () {\n  function ScrollbarThumb(_direction, _minSize) {\n    if (_minSize === void 0) {\n      _minSize = 0;\n    }\n\n    this._direction = _direction;\n    this._minSize = _minSize;\n    /**\n     * Thumb element\n     */\n\n    this.element = document.createElement('div');\n    /**\n     * Display size of the thumb\n     * will always be greater than `scrollbar.options.thumbMinSize`\n     */\n\n    this.displaySize = 0;\n    /**\n     * Actual size of the thumb\n     */\n\n    this.realSize = 0;\n    /**\n     * Thumb offset to the top\n     */\n\n    this.offset = 0;\n    this.element.className = \"scrollbar-thumb scrollbar-thumb-\" + _direction;\n  }\n  /**\n   * Attach to track element\n   *\n   * @param trackEl Track element\n   */\n\n\n  ScrollbarThumb.prototype.attachTo = function (trackEl) {\n    trackEl.appendChild(this.element);\n  };\n\n  ScrollbarThumb.prototype.update = function (scrollOffset, containerSize, pageSize) {\n    // calculate thumb size\n    // pageSize > containerSize -> scrollable\n    this.realSize = Math.min(containerSize / pageSize, 1) * containerSize;\n    this.displaySize = Math.max(this.realSize, this._minSize); // calculate thumb offset\n\n    this.offset = scrollOffset / pageSize * (containerSize + (this.realSize - this.displaySize));\n    setStyle(this.element, this._getStyle());\n  };\n\n  ScrollbarThumb.prototype._getStyle = function () {\n    switch (this._direction) {\n      case TrackDirection.X:\n        return {\n          width: this.displaySize + \"px\",\n          '-transform': \"translate3d(\" + this.offset + \"px, 0, 0)\"\n        };\n\n      case TrackDirection.Y:\n        return {\n          height: this.displaySize + \"px\",\n          '-transform': \"translate3d(0, \" + this.offset + \"px, 0)\"\n        };\n\n      default:\n        return null;\n    }\n  };\n\n  return ScrollbarThumb;\n}();\n\nexport { ScrollbarThumb };","map":{"version":3,"mappings":"AACA,SAASA,cAAT,QAA+B,aAA/B;AACA,SAASC,QAAT,QAAyB,WAAzB;;AAEA;AAAA;AAAA;AAsBE,0BACUC,UADV,EAEUC,QAFV,EAEsB;AAAZ;AAAAA;AAAY;;AADZ;AACA;AAvBV;;;;AAGS,mBAAUC,QAAQ,CAACC,aAAT,CAAuB,KAAvB,CAAV;AAET;;;;;AAIA,uBAAc,CAAd;AAEA;;;;AAGA,oBAAW,CAAX;AAEA;;;;AAGA,kBAAS,CAAT;AAME,SAAKC,OAAL,CAAaC,SAAb,GAAyB,qCAAmCL,UAA5D;AACD;AAED;;;;;;;AAKAM,gDAASC,OAAT,EAA6B;AAC3BA,WAAO,CAACC,WAAR,CAAoB,KAAKJ,OAAzB;AACD,GAFD;;AAIAE,8CACEG,YADF,EAEEC,aAFF,EAGEC,QAHF,EAGkB;AAEhB;AACA;AACA,SAAKC,QAAL,GAAgBC,IAAI,CAACC,GAAL,CAASJ,aAAa,GAAGC,QAAzB,EAAmC,CAAnC,IAAwCD,aAAxD;AACA,SAAKK,WAAL,GAAmBF,IAAI,CAACG,GAAL,CAAS,KAAKJ,QAAd,EAAwB,KAAKX,QAA7B,CAAnB,CALgB,CAOhB;;AACA,SAAKgB,MAAL,GAAcR,YAAY,GAAGE,QAAf,IAA2BD,aAAa,IAAI,KAAKE,QAAL,GAAgB,KAAKG,WAAzB,CAAxC,CAAd;AAEAhB,YAAQ,CAAC,KAAKK,OAAN,EAAe,KAAKc,SAAL,EAAf,CAAR;AACD,GAdD;;AAgBQZ,uCAAR;AACE,YAAQ,KAAKN,UAAb;AACE,WAAKF,cAAc,CAACqB,CAApB;AACE,eAAO;AACLC,eAAK,EAAK,KAAKL,WAAL,GAAgB,IADrB;AAEL,wBAAc,iBAAe,KAAKE,MAApB,GAA0B;AAFnC,SAAP;;AAKF,WAAKnB,cAAc,CAACuB,CAApB;AACE,eAAO;AACLC,gBAAM,EAAK,KAAKP,WAAL,GAAgB,IADtB;AAEL,wBAAc,oBAAkB,KAAKE,MAAvB,GAA6B;AAFtC,SAAP;;AAKF;AACE,eAAO,IAAP;AAdJ;AAgBD,GAjBO;;AAkBV;AAAC,CAxED","names":["TrackDirection","setStyle","_direction","_minSize","document","createElement","element","className","ScrollbarThumb","trackEl","appendChild","scrollOffset","containerSize","pageSize","realSize","Math","min","displaySize","max","offset","_getStyle","X","width","Y","height"],"sources":["/home/mohammad/Desktop/MARS-main/node_modules/smooth-scrollbar/src/track/thumb.ts"],"sourcesContent":["import * as I from '../interfaces/';\nimport { TrackDirection } from './direction';\nimport { setStyle } from '../utils/';\n\nexport class ScrollbarThumb implements I.ScrollbarThumb {\n  /**\n   * Thumb element\n   */\n  readonly element = document.createElement('div');\n\n  /**\n   * Display size of the thumb\n   * will always be greater than `scrollbar.options.thumbMinSize`\n   */\n  displaySize = 0;\n\n  /**\n   * Actual size of the thumb\n   */\n  realSize = 0;\n\n  /**\n   * Thumb offset to the top\n   */\n  offset = 0;\n\n  constructor(\n    private _direction: TrackDirection,\n    private _minSize = 0,\n  ) {\n    this.element.className = `scrollbar-thumb scrollbar-thumb-${_direction}`;\n  }\n\n  /**\n   * Attach to track element\n   *\n   * @param trackEl Track element\n   */\n  attachTo(trackEl: HTMLElement) {\n    trackEl.appendChild(this.element);\n  }\n\n  update(\n    scrollOffset: number,\n    containerSize: number,\n    pageSize: number,\n  ) {\n    // calculate thumb size\n    // pageSize > containerSize -> scrollable\n    this.realSize = Math.min(containerSize / pageSize, 1) * containerSize;\n    this.displaySize = Math.max(this.realSize, this._minSize);\n\n    // calculate thumb offset\n    this.offset = scrollOffset / pageSize * (containerSize + (this.realSize - this.displaySize));\n\n    setStyle(this.element, this._getStyle());\n  }\n\n  private _getStyle() {\n    switch (this._direction) {\n      case TrackDirection.X:\n        return {\n          width: `${this.displaySize}px`,\n          '-transform': `translate3d(${this.offset}px, 0, 0)`,\n        };\n\n      case TrackDirection.Y:\n        return {\n          height: `${this.displaySize}px`,\n          '-transform': `translate3d(0, ${this.offset}px, 0)`,\n        };\n\n      default:\n        return null;\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}