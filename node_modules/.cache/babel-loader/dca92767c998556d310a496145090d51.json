{"ast":null,"code":"import { __assign } from \"tslib\";\n\nvar ScrollbarPlugin =\n/** @class */\nfunction () {\n  function ScrollbarPlugin(scrollbar, options) {\n    var _newTarget = this.constructor;\n    this.scrollbar = scrollbar;\n    this.name = _newTarget.pluginName;\n    this.options = __assign(__assign({}, _newTarget.defaultOptions), options);\n  }\n\n  ScrollbarPlugin.prototype.onInit = function () {};\n\n  ScrollbarPlugin.prototype.onDestroy = function () {};\n\n  ScrollbarPlugin.prototype.onUpdate = function () {};\n\n  ScrollbarPlugin.prototype.onRender = function (_remainMomentum) {};\n\n  ScrollbarPlugin.prototype.transformDelta = function (delta, _evt) {\n    return __assign({}, delta);\n  };\n\n  ScrollbarPlugin.pluginName = '';\n  ScrollbarPlugin.defaultOptions = {};\n  return ScrollbarPlugin;\n}();\n\nexport { ScrollbarPlugin };\nexport var globalPlugins = {\n  order: new Set(),\n  constructors: {}\n};\nexport function addPlugins() {\n  var Plugins = [];\n\n  for (var _i = 0; _i < arguments.length; _i++) {\n    Plugins[_i] = arguments[_i];\n  }\n\n  Plugins.forEach(function (P) {\n    var pluginName = P.pluginName;\n\n    if (!pluginName) {\n      throw new TypeError(\"plugin name is required\");\n    }\n\n    globalPlugins.order.add(pluginName);\n    globalPlugins.constructors[pluginName] = P;\n  });\n}\nexport function initPlugins(scrollbar, options) {\n  return Array.from(globalPlugins.order).filter(function (pluginName) {\n    return options[pluginName] !== false;\n  }).map(function (pluginName) {\n    var Plugin = globalPlugins.constructors[pluginName];\n    var instance = new Plugin(scrollbar, options[pluginName]); // bind plugin options to `scrollbar.options`\n\n    options[pluginName] = instance.options;\n    return instance;\n  });\n}","map":{"version":3,"mappings":";;AAIA;AAAA;AAAA;AAQE,2BACEA,SADF,EAEEC,OAFF,EAEe;;AAEb,SAAKD,SAAL,GAAiBA,SAAjB;AACA,SAAKE,IAAL,GAAYC,WAAWC,UAAvB;AAEA,SAAKH,OAAL,GAAYI,sBACPF,WAAWG,cADJ,GAEPL,OAFO,CAAZ;AAID;;AAEDM,kDAAW,CAAX;;AACAA,qDAAc,CAAd;;AAEAA,oDAAa,CAAb;;AACAA,iDAASC,eAAT,EAAkC,CAAI,CAAtC;;AAEAD,uDAAeE,KAAf,EAAgCC,IAAhC,EAA2C;AACzC,wBAAYD,KAAZ;AACD,GAFD;;AA1BOF,+BAAa,EAAb;AACAA,mCAAsB,EAAtB;AA4BT;AA9BA;;SAAaA;AAuCb,OAAO,IAAMI,aAAa,GAAc;AACtCC,OAAK,EAAE,IAAIC,GAAJ,EAD+B;AAEtCC,cAAY,EAAE;AAFwB,CAAjC;AAKP,OAAM,SAAUC,UAAV,GAAoB;AACxB;;OAAA,yCAAsC;AAAtCC;;;AAEAA,SAAO,CAACC,OAAR,CAAgB,UAACC,CAAD,EAAE;AACR;;AAER,QAAI,CAACd,UAAL,EAAiB;AACf,YAAM,IAAIe,SAAJ,CAAc,yBAAd,CAAN;AACD;;AAEDR,iBAAa,CAACC,KAAd,CAAoBQ,GAApB,CAAwBhB,UAAxB;AACAO,iBAAa,CAACG,YAAd,CAA2BV,UAA3B,IAAyCc,CAAzC;AACD,GATD;AAUD;AAED,OAAM,SAAUG,WAAV,CACJrB,SADI,EAEJC,OAFI,EAEQ;AAEZ,SAAOqB,KAAK,CAACC,IAAN,CAAWZ,aAAa,CAACC,KAAzB,EACJY,MADI,CACG,UAACpB,UAAD,EAAmB;AACzB,WAAOH,OAAO,CAACG,UAAD,CAAP,KAAwB,KAA/B;AACD,GAHI,EAIJqB,GAJI,CAIA,UAACrB,UAAD,EAAmB;AACtB,QAAMsB,MAAM,GAAGf,aAAa,CAACG,YAAd,CAA2BV,UAA3B,CAAf;AAEA,QAAMuB,QAAQ,GAAG,IAAID,MAAJ,CAAW1B,SAAX,EAAsBC,OAAO,CAACG,UAAD,CAA7B,CAAjB,CAHsB,CAKtB;;AACAH,WAAO,CAACG,UAAD,CAAP,GAAsBuB,QAAQ,CAAC1B,OAA/B;AAEA,WAAO0B,QAAP;AACD,GAbI,CAAP;AAcD","names":["scrollbar","options","name","_newTarget","pluginName","__assign","defaultOptions","ScrollbarPlugin","_remainMomentum","delta","_evt","globalPlugins","order","Set","constructors","addPlugins","Plugins","forEach","P","TypeError","add","initPlugins","Array","from","filter","map","Plugin","instance"],"sources":["/home/mohammad/Desktop/MARS-main/node_modules/smooth-scrollbar/src/plugin.ts"],"sourcesContent":["import * as I from './interfaces/';\n\nimport { Scrollbar } from './scrollbar'; // used as type annotations\n\nexport class ScrollbarPlugin implements I.ScrollbarPlugin {\n  static pluginName = '';\n  static defaultOptions: any = {};\n\n  readonly scrollbar: Scrollbar;\n  readonly options: any;\n  readonly name: string;\n\n  constructor(\n    scrollbar: Scrollbar,\n    options?: any,\n  ) {\n    this.scrollbar = scrollbar;\n    this.name = new.target.pluginName;\n\n    this.options = {\n      ...new.target.defaultOptions,\n      ...options,\n    };\n  }\n\n  onInit() {}\n  onDestroy() {}\n\n  onUpdate() {}\n  onRender(_remainMomentum: I.Data2d) {}\n\n  transformDelta(delta: I.Data2d, _evt: Event): I.Data2d {\n    return { ...delta };\n  }\n}\n\nexport type PluginMap = {\n  order: Set<string>,\n  constructors: {\n    [name: string]: typeof ScrollbarPlugin,\n  },\n};\n\nexport const globalPlugins: PluginMap = {\n  order: new Set<string>(),\n  constructors: {},\n};\n\nexport function addPlugins(\n  ...Plugins: (typeof ScrollbarPlugin)[]\n): void {\n  Plugins.forEach((P) => {\n    const { pluginName } = P;\n\n    if (!pluginName) {\n      throw new TypeError(`plugin name is required`);\n    }\n\n    globalPlugins.order.add(pluginName);\n    globalPlugins.constructors[pluginName] = P;\n  });\n}\n\nexport function initPlugins(\n  scrollbar: Scrollbar,\n  options: any,\n): ScrollbarPlugin[] {\n  return Array.from(globalPlugins.order)\n    .filter((pluginName: string) => {\n      return options[pluginName] !== false;\n    })\n    .map((pluginName: string) => {\n      const Plugin = globalPlugins.constructors[pluginName];\n\n      const instance = new Plugin(scrollbar, options[pluginName]);\n\n      // bind plugin options to `scrollbar.options`\n      options[pluginName] = instance.options;\n\n      return instance;\n    });\n}\n"]},"metadata":{},"sourceType":"module"}