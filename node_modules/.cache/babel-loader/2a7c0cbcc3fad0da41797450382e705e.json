{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { ScrollbarTrack } from './track';\nimport { TrackDirection } from './direction';\nimport { debounce } from '../decorators/';\n\nvar TrackController =\n/** @class */\nfunction () {\n  function TrackController(_scrollbar) {\n    this._scrollbar = _scrollbar;\n    var thumbMinSize = _scrollbar.options.thumbMinSize;\n    this.xAxis = new ScrollbarTrack(TrackDirection.X, thumbMinSize);\n    this.yAxis = new ScrollbarTrack(TrackDirection.Y, thumbMinSize);\n    this.xAxis.attachTo(_scrollbar.containerEl);\n    this.yAxis.attachTo(_scrollbar.containerEl);\n\n    if (_scrollbar.options.alwaysShowTracks) {\n      this.xAxis.show();\n      this.yAxis.show();\n    }\n  }\n  /**\n   * Updates track appearance\n   */\n\n\n  TrackController.prototype.update = function () {\n    var _a = this._scrollbar,\n        size = _a.size,\n        offset = _a.offset;\n    this.xAxis.update(offset.x, size.container.width, size.content.width);\n    this.yAxis.update(offset.y, size.container.height, size.content.height);\n  };\n  /**\n   * Automatically hide tracks when scrollbar is in idle state\n   */\n\n\n  TrackController.prototype.autoHideOnIdle = function () {\n    if (this._scrollbar.options.alwaysShowTracks) {\n      return;\n    }\n\n    this.xAxis.hide();\n    this.yAxis.hide();\n  };\n\n  __decorate([debounce(300)], TrackController.prototype, \"autoHideOnIdle\", null);\n\n  return TrackController;\n}();\n\nexport { TrackController };","map":{"version":3,"mappings":";AAEA,SAASA,cAAT,QAA+B,SAA/B;AACA,SAASC,cAAT,QAA+B,aAA/B;AAEA,SACEC,QADF,QAEO,gBAFP;;AAIA;AAAA;AAAA;AAIE,2BACUC,UADV,EACiC;AAAvB;AAER,QAAMC,YAAY,GAAGD,UAAU,CAACE,OAAX,CAAmBD,YAAxC;AAEA,SAAKE,KAAL,GAAa,IAAIN,cAAJ,CAAmBC,cAAc,CAACM,CAAlC,EAAqCH,YAArC,CAAb;AACA,SAAKI,KAAL,GAAa,IAAIR,cAAJ,CAAmBC,cAAc,CAACQ,CAAlC,EAAqCL,YAArC,CAAb;AAEA,SAAKE,KAAL,CAAWI,QAAX,CAAoBP,UAAU,CAACQ,WAA/B;AACA,SAAKH,KAAL,CAAWE,QAAX,CAAoBP,UAAU,CAACQ,WAA/B;;AAEA,QAAIR,UAAU,CAACE,OAAX,CAAmBO,gBAAvB,EAAyC;AACvC,WAAKN,KAAL,CAAWO,IAAX;AACA,WAAKL,KAAL,CAAWK,IAAX;AACD;AACF;AAED;;;;;AAGAC;AACQ;AAAA,QACJC,cADI;AAAA,QAEJC,kBAFI;AAKN,SAAKV,KAAL,CAAWW,MAAX,CAAkBD,MAAM,CAACE,CAAzB,EAA4BH,IAAI,CAACI,SAAL,CAAeC,KAA3C,EAAkDL,IAAI,CAACM,OAAL,CAAaD,KAA/D;AACA,SAAKZ,KAAL,CAAWS,MAAX,CAAkBD,MAAM,CAACM,CAAzB,EAA4BP,IAAI,CAACI,SAAL,CAAeI,MAA3C,EAAmDR,IAAI,CAACM,OAAL,CAAaE,MAAhE;AACD,GARD;AAUA;;;;;AAIAT;AACE,QAAI,KAAKX,UAAL,CAAgBE,OAAhB,CAAwBO,gBAA5B,EAA8C;AAC5C;AACD;;AAED,SAAKN,KAAL,CAAWkB,IAAX;AACA,SAAKhB,KAAL,CAAWgB,IAAX;AACD,GAPD;;AAAAC,cADCvB,QAAQ,CAAC,GAAD,CACT;;AAQF;AA9CA;;SAAaY","names":["ScrollbarTrack","TrackDirection","debounce","_scrollbar","thumbMinSize","options","xAxis","X","yAxis","Y","attachTo","containerEl","alwaysShowTracks","show","TrackController","size","offset","update","x","container","width","content","y","height","hide","__decorate"],"sources":["/home/mohammad/Desktop/MARS-main/node_modules/smooth-scrollbar/src/track/index.ts"],"sourcesContent":["import * as I from '../interfaces/';\n\nimport { ScrollbarTrack } from './track';\nimport { TrackDirection } from './direction';\n\nimport {\n  debounce,\n} from '../decorators/';\n\nexport class TrackController implements I.TrackController {\n  readonly xAxis: ScrollbarTrack;\n  readonly yAxis: ScrollbarTrack;\n\n  constructor(\n    private _scrollbar: I.Scrollbar,\n  ) {\n    const thumbMinSize = _scrollbar.options.thumbMinSize;\n\n    this.xAxis = new ScrollbarTrack(TrackDirection.X, thumbMinSize);\n    this.yAxis = new ScrollbarTrack(TrackDirection.Y, thumbMinSize);\n\n    this.xAxis.attachTo(_scrollbar.containerEl);\n    this.yAxis.attachTo(_scrollbar.containerEl);\n\n    if (_scrollbar.options.alwaysShowTracks) {\n      this.xAxis.show();\n      this.yAxis.show();\n    }\n  }\n\n  /**\n   * Updates track appearance\n   */\n  update() {\n    const {\n      size,\n      offset,\n    } = this._scrollbar;\n\n    this.xAxis.update(offset.x, size.container.width, size.content.width);\n    this.yAxis.update(offset.y, size.container.height, size.content.height);\n  }\n\n  /**\n   * Automatically hide tracks when scrollbar is in idle state\n   */\n  @debounce(300)\n  autoHideOnIdle() {\n    if (this._scrollbar.options.alwaysShowTracks) {\n      return;\n    }\n\n    this.xAxis.hide();\n    this.yAxis.hide();\n  }\n}\n"]},"metadata":{},"sourceType":"module"}